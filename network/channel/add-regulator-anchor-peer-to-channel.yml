#
# SPDX-License-Identifier: Apache-2.0
#
---
    - name: Add regulator anchor peer to the channel
      hosts: localhost
      vars_files:
        - ../vars/common.yml
        - ../vars/regulator-org.yml
        - ../vars/ordering-org.yml
      tasks:
        - name: Get the ordering service information
          ibm.blockchain_platform.ordering_service_info:
            api_endpoint: "{{ api_endpoint }}"
            api_authtype: "{{ api_authtype }}"
            api_key: "{{ api_key }}"
            api_secret: "{{ api_secret | default(omit) }}"
            api_token_endpoint: "{{ api_token_endpoint | default(omit) }}"
            name: "{{ ordering_service_name }}"
          register: ordering_service
    
        - name: Fail if the ordering service does not exist
          fail:
            msg: "{{ ordering_service_name }} does not exist"
          when: not ordering_service.exists
    
        - name: Fetch the channel configuration
          ibm.blockchain_platform.channel_config:
            api_endpoint: "{{ api_endpoint }}"
            api_authtype: "{{ api_authtype }}"
            api_key: "{{ api_key }}"
            api_secret: "{{ api_secret | default(omit) }}"
            api_token_endpoint: "{{ api_token_endpoint | default(omit) }}"
            ordering_service: "{{ ordering_service_name }}"
            identity: "../output/{{ regulator_name }}/Admin.json"
            msp_id: "{{ regulator_msp_id }}"
            operation: fetch
            name: "{{ channel_name }}"
            path: ../output/original_config.bin
    
        - name: Create a copy of the channel configuration
          copy:
            src: ../output/original_config.bin
            dest: ../output/updated_config.bin
    
        - name: Update the organization
          ibm.blockchain_platform.channel_member:
            state: present
            api_endpoint: "{{ api_endpoint }}"
            api_authtype: "{{ api_authtype }}"
            api_key: "{{ api_key }}"
            api_secret: "{{ api_secret | default(omit) }}"
            api_token_endpoint: "{{ api_token_endpoint | default(omit) }}"
            organization: "{{ regulator_name }}"
            anchor_peers:
              - "{{ regulator_peer_name }}"
            path: ../output/updated_config.bin
    
        - name: Compute the channel configuration update
          ibm.blockchain_platform.channel_config:
            operation: compute_update
            name: "{{ channel_name }}"
            original: ../output/original_config.bin
            updated: ../output/updated_config.bin
            path: ../output/config_update.bin
          register: compute_update
    
        - name: Sign the channel configuration update
          ibm.blockchain_platform.channel_config:
            operation: sign_update
            identity: "../output/{{ regulator_name }}/Admin.json"
            msp_id: "{{ regulator_msp_id }}"
            name: "{{ channel_name }}"
            path: ../output/config_update.bin
          when: compute_update.path
    
        - name: Apply the channel configuration update
          ibm.blockchain_platform.channel_config:
            api_endpoint: "{{ api_endpoint }}"
            api_authtype: "{{ api_authtype }}"
            api_key: "{{ api_key }}"
            api_secret: "{{ api_secret | default(omit) }}"
            api_token_endpoint: "{{ api_token_endpoint | default(omit) }}"
            operation: apply_update
            ordering_service: "{{ ordering_service_name }}"
            identity: "../output/{{ regulator_name }}/Admin.json"
            msp_id: "{{ regulator_msp_id }}"
            name: "{{ channel_name }}"
            path: ../output/config_update.bin
          when: compute_update.path
    